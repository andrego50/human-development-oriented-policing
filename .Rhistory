coords = c('X1','X2'),
crs = 4326),
#label = ~ mk_type,
fillColor = brewer.pal(n = num_cluster, name = 'Paired')[5],
fillOpacity = 1,
stroke = F,
group = "cluster 5",
clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(
data = st_as_sf(data.frame(cbind(Clusters[["6"]][1:length(Clusters[["6"]])/2],
Clusters[["6"]][(1 + length(Clusters[["6"]])/2):length(Clusters[["6"]])])),
coords = c('X1','X2'),
crs = 4326),
#label = ~ mk_type,
fillColor = brewer.pal(n = num_cluster, name = 'Paired')[6],
fillOpacity = 1,
stroke = F,
group = "cluster 6",
clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(
data = st_as_sf(data.frame(cbind(Clusters[["7"]][1:length(Clusters[["7"]])/2],
Clusters[["7"]][(1 + length(Clusters[["7"]])/2):length(Clusters[["7"]])])),
coords = c('X1','X2'),
crs = 4326),
#label = ~ mk_type,
fillColor = brewer.pal(n = num_cluster, name = 'Paired')[7],
fillOpacity = 1,
stroke = F,
group = "cluster 7",
clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(
data = st_as_sf(data.frame(cbind(Clusters[["8"]][1:length(Clusters[["8"]])/2],
Clusters[["8"]][(1 + length(Clusters[["8"]])/2):length(Clusters[["8"]])])),
coords = c('X1','X2'),
crs = 4326),
#label = ~ mk_type,
fillColor = brewer.pal(n = num_cluster, name = 'Paired')[8],
fillOpacity = 1,
stroke = F,
group = "cluster 8",
clusterOptions = markerClusterOptions()) %>%
# Add a User-Interface (UI) control to switch layers
addLayersControl(
baseGroups = c("Open Street Map","ESRI World Imagery","Positron"),
overlayGroups = c("cluster 1", "cluster 2", "cluster 3",
"cluster 4", "cluster 5", "cluster 6",
"cluster 7", "cluster 8"),
options = layersControlOptions(collapsed = F)
)
puntos_coor <- puntos %>%
filter(mk_type == 'problemáticas') %>%
st_coordinates()
# Finding the center point
puntos.center = colMeans(puntos_coor)
# Finding the covariance matrix
puntos.cov = cov(puntos_coor)
# Ellipse radius from Chi-Sqaure distrubiton
rad = qchisq(p = 0.95 , df = ncol(puntos_coor))
# Square root of Chi-Square value
rad = sqrt(rad)
# Finding ellipse coordiantes
ellipse <- car::ellipse(center = puntos.center,
shape = puntos.cov, radius = rad,
segments = 150 , draw = FALSE)
# Ellipse coordinates names should be same with air data set
ellipse <- as.data.frame(ellipse)
colnames(ellipse) <- colnames(puntos_coor)
# Create scatter Plot
figure <- ggplot(data.frame(puntos_coor), aes(x = X , y = Y)) +
geom_point(size = 2) +
geom_polygon(data = ellipse , fill = "orange" , color = "orange" , alpha = 0.5)+
geom_point(aes(puntos.center[1] , puntos.center[2]) , size = 5 , color = "blue") +
geom_text( aes(label = row.names(data.frame(puntos_coor))) , hjust = 1 , vjust = -1.5 ,size = 2.5 ) +
ylab("Longitud") + xlab("Latitud")
# Run and display plot
#figure
# Finding distances
distances <- mahalanobis(x = puntos_coor,
center = puntos.center,
cov = puntos.cov)
# Cutoff value for ditances from Chi-Sqaure Dist.
# with p = 0.95 df = 2 which in ncol(air)
cutoff <- qchisq(p = 0.95 , df = ncol(puntos_coor))
## Display observation whose distance greater than cutoff value
puntos_coor_mahal <- puntos_coor[distances < cutoff,]
# find the variance
TheVariance = apply(puntos_coor_mahal, 2, var)
# find the sum of squares for 1 cluster
WithinClusterSumOfSquares = (nrow(puntos_coor_mahal)-1) * sum(TheVariance)
# find the sum of squares for 2 to 15 clusters
for (i in 2:20) {
ClusterInfo=kmeans(puntos_coor_mahal, centers=i)
WithinClusterSumOfSquares[i] = sum(ClusterInfo$withinss)
}
# plut the result
plot(1:20, WithinClusterSumOfSquares, type="b",
xlab="Number of Clusters",ylab="Within groups sum of squares")
# number of clusters
num_cluster = 8
# K-Means Cluster Analysis
ClusterInfo = kmeans(puntos_coor_mahal, num_cluster)
# Put the result using the cluster to colorize the points in each cluster
#plot(puntos_coor_mahal, col = ClusterInfo$cluster)
# add the centers of the clusters
points(ClusterInfo$centers, col = 1:num_cluster, pch = 8, cex = 2)
Clusters=split(puntos_coor_mahal, ClusterInfo$cluster)
puntos_coor <- puntos %>%
filter(mk_type == 'problemáticas') %>%
st_coordinates()
# Finding the center point
puntos.center = colMeans(puntos_coor)
# Finding the covariance matrix
puntos.cov = cov(puntos_coor)
# Ellipse radius from Chi-Sqaure distrubiton
rad = qchisq(p = 0.95 , df = ncol(puntos_coor))
# Square root of Chi-Square value
rad = sqrt(rad)
# Finding distances
distances <- mahalanobis(x = puntos_coor,
center = puntos.center,
cov = puntos.cov)
# Cutoff value for ditances from Chi-Sqaure Dist.
# with p = 0.95 df = 2 which in ncol(air)
cutoff <- qchisq(p = 0.95 , df = ncol(puntos_coor))
## Display observation whose distance greater than cutoff value
puntos_coor_mahal <- puntos_coor[distances < cutoff,]
# find the variance
TheVariance = apply(puntos_coor_mahal, 2, var)
# find the sum of squares for 1 cluster
WithinClusterSumOfSquares = (nrow(puntos_coor_mahal)-1) * sum(TheVariance)
# number of clusters
num_cluster = 8
# K-Means Cluster Analysis
ClusterInfo = kmeans(puntos_coor_mahal, num_cluster)
# add the centers of the clusters
points(ClusterInfo$centers, col = 1:num_cluster, pch = 8, cex = 2)
puntos_coor <- puntos %>%
filter(mk_type == 'problemáticas') %>%
st_coordinates()
# Finding the center point
puntos.center = colMeans(puntos_coor)
# Finding the covariance matrix
puntos.cov = cov(puntos_coor)
# Ellipse radius from Chi-Sqaure distrubiton
rad = qchisq(p = 0.95 , df = ncol(puntos_coor))
# Square root of Chi-Square value
rad = sqrt(rad)
# Finding distances
distances <- mahalanobis(x = puntos_coor,
center = puntos.center,
cov = puntos.cov)
# Cutoff value for ditances from Chi-Sqaure Dist.
# with p = 0.95 df = 2 which in ncol(air)
cutoff <- qchisq(p = 0.95 , df = ncol(puntos_coor))
## Display observation whose distance greater than cutoff value
puntos_coor_mahal <- puntos_coor[distances < cutoff,]
# find the variance
TheVariance = apply(puntos_coor_mahal, 2, var)
# find the sum of squares for 1 cluster
WithinClusterSumOfSquares = (nrow(puntos_coor_mahal)-1) * sum(TheVariance)
# number of clusters
num_cluster = 8
# K-Means Cluster Analysis
ClusterInfo = kmeans(puntos_coor_mahal, num_cluster)
# add the centers of the clusters
Clusters=split(puntos_coor_mahal, ClusterInfo$cluster)
l1 %>%
addCircleMarkers(
data = st_as_sf(data.frame(cbind(Clusters[["1"]][1:length(Clusters[["1"]])/2],
Clusters[["1"]][(1 + length(Clusters[["1"]])/2):length(Clusters[["1"]])])),
coords = c('X1','X2'),
crs = 4326),
#label = ~ mk_type,
fillColor = brewer.pal(n = num_cluster, name = 'Paired')[1],
fillOpacity = 1,
stroke = F,
group = "cluster 1",
clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(
data = st_as_sf(data.frame(cbind(Clusters[["2"]][1:length(Clusters[["2"]])/2],
Clusters[["2"]][(1 + length(Clusters[["2"]])/2):length(Clusters[["2"]])])),
coords = c('X1','X2'),
crs = 4326),
#label = ~ mk_type,
fillColor = brewer.pal(n = num_cluster, name = 'Paired')[2],
fillOpacity = 1,
stroke = F,
group = "cluster 2",
clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(
data = st_as_sf(data.frame(cbind(Clusters[["3"]][1:length(Clusters[["3"]])/2],
Clusters[["3"]][(1 + length(Clusters[["3"]])/2):length(Clusters[["3"]])])),
coords = c('X1','X2'),
crs = 4326),
#label = ~ mk_type,
fillColor = brewer.pal(n = num_cluster, name = 'Paired')[3],
fillOpacity = 1,
stroke = F,
group = "cluster 3",
clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(
data = st_as_sf(data.frame(cbind(Clusters[["4"]][1:length(Clusters[["4"]])/2],
Clusters[["4"]][(1 + length(Clusters[["4"]])/2):length(Clusters[["4"]])])),
coords = c('X1','X2'),
crs = 4326),
#label = ~ mk_type,
fillColor = brewer.pal(n = num_cluster, name = 'Paired')[4],
fillOpacity = 1,
stroke = F,
group = "cluster 4",
clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(
data = st_as_sf(data.frame(cbind(Clusters[["5"]][1:length(Clusters[["5"]])/2],
Clusters[["5"]][(1 + length(Clusters[["5"]])/2):length(Clusters[["5"]])])),
coords = c('X1','X2'),
crs = 4326),
#label = ~ mk_type,
fillColor = brewer.pal(n = num_cluster, name = 'Paired')[5],
fillOpacity = 1,
stroke = F,
group = "cluster 5",
clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(
data = st_as_sf(data.frame(cbind(Clusters[["6"]][1:length(Clusters[["6"]])/2],
Clusters[["6"]][(1 + length(Clusters[["6"]])/2):length(Clusters[["6"]])])),
coords = c('X1','X2'),
crs = 4326),
#label = ~ mk_type,
fillColor = brewer.pal(n = num_cluster, name = 'Paired')[6],
fillOpacity = 1,
stroke = F,
group = "cluster 6",
clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(
data = st_as_sf(data.frame(cbind(Clusters[["7"]][1:length(Clusters[["7"]])/2],
Clusters[["7"]][(1 + length(Clusters[["7"]])/2):length(Clusters[["7"]])])),
coords = c('X1','X2'),
crs = 4326),
#label = ~ mk_type,
fillColor = brewer.pal(n = num_cluster, name = 'Paired')[7],
fillOpacity = 1,
stroke = F,
group = "cluster 7",
clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(
data = st_as_sf(data.frame(cbind(Clusters[["8"]][1:length(Clusters[["8"]])/2],
Clusters[["8"]][(1 + length(Clusters[["8"]])/2):length(Clusters[["8"]])])),
coords = c('X1','X2'),
crs = 4326),
#label = ~ mk_type,
fillColor = brewer.pal(n = num_cluster, name = 'Paired')[8],
fillOpacity = 1,
stroke = F,
group = "cluster 8",
clusterOptions = markerClusterOptions()) %>%
# Add a User-Interface (UI) control to switch layers
addLayersControl(
baseGroups = c("Open Street Map","ESRI World Imagery","Positron"),
overlayGroups = c("cluster 1", "cluster 2", "cluster 3",
"cluster 4", "cluster 5", "cluster 6",
"cluster 7", "cluster 8"),
options = layersControlOptions(collapsed = F)
)
install.packages("RSQLite")
library(RSQLite)
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), ":memory:")
View(con)
dbListTables(con)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), "/home/andres/Documents/Sudir PDH/ibague-pdh/datos")
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), "/home/andres/Documents/Sudir PDH/ibague-pdh/datos")
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), "/home/andres/Documents/Sudir PDH/ibague-pdh/datos/pdh_db")
dbListTables(con)
dbListFields(con, "pdh_db")
dbListFields(con, "zonas")
generadores <- dbSendQuery(con, "SELECT * FROM microterritorios_causas")
View(generadores)
generadores@sql
generadores@conn
dbFetch(generadores)
class(dbFetch(generadores))
dbFetch(generadores)
dbFetch(generadores)
generadores <- dbSendQuery(con, "SELECT * FROM microterritorios_causas")
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), "/home/andres/Documents/Sudir PDH/ibague-pdh/datos/pdh_db")
generadores <- dbSendQuery(con, "SELECT * FROM microterritorios_causas")
dbFetch(generadores)
df <- dbFetch(generadores)
View(df)
dbFetch(generadores)[1,]
counts <- table(dbFetch(generadores))
counts <- table(dbFetch(generadores)[,1])
generadores <- dbgetQuery(con, "SELECT * FROM microterritorios_causas")
dbSendQuery(con, "SELECT * FROM microterritorios_causas")
generadores <- dbSendQuery(con, "SELECT * FROM microterritorios_causas")
dbFetch(generadores)[,1]
dbFetch(generadores)[,2]
generadores <- dbGetQuery(con, "SELECT * FROM microterritorios_causas")
View(generadores)
generador <- dbGetQuery(con, "SELECT * FROM microterritorios_causas")
counts <- table(generador$microterritorio,
generador$causa,
generador$interaccion_espacial)
counts
View(counts)
mosaicplot(counts, xlab='Match Result', ylab='Team',main='Wins by Team', col='orange')
library(RSQLite)
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), "/home/andres/Documents/Sudir PDH/ibague-pdh/datos/pdh_db")
generador <- dbGetQuery(con, "SELECT * FROM microterritorios_causas")
counts <- table(generador$microterritorio,
generador$causa,
generador$interaccion_espacial)
mosaicplot(counts, xlab='Match Result', ylab='Team',main='Wins by Team', col='orange')
#dbDisconnect(con)
counts <- table(generador$microterritorio,
#generador$causa,
generador$interaccion_espacial)
mosaicplot(counts, xlab='Match Result', ylab='Team',main='Wins by Team', col='orange')
counts <- table(generador$microterritorio,
generador$causa)
mosaicplot(counts, xlab='Match Result', ylab='Team',main='Wins by Team', col='orange')
counts <- table(generador$causa,
generador$microterritorio)
mosaicplot(counts, xlab='Match Result', ylab='Team',main='Wins by Team', col='orange')
counts <- table(generador$causa,
generador$microterritorio,
generador$interaccion_espacial)
counts
mosaic(~ microterritorio + causa + interaccion_espacial, data = counts,
main = "Survival on the Titanic", shade = TRUE, legend = TRUE)
?mosaic
??mosaic
install.packages("vcd")
install.packages("vcdExtra")
library(RSQLite)
library(DBI)
library(vcd)
library(vcdExtra)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), "/home/andres/Documents/Sudir PDH/ibague-pdh/datos/pdh_db")
generador <- dbGetQuery(con, "SELECT * FROM microterritorios_causas")
counts <- table(generador$causa,
generador$microterritorio,
generador$interaccion_espacial)
mosaic(~ microterritorio + causa + interaccion_espacial, data = counts,
main = "Survival on the Titanic", shade = TRUE, legend = TRUE)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), "/home/andres/Documents/Sudir PDH/ibague-pdh/datos/pdh_db")
generador <- dbGetQuery(con, "SELECT * FROM microterritorios_causas")
counts <- table(generador$causa,
generador$microterritorio,
generador$interaccion_espacial)
mosaic(~ microterritorio + causa + interaccion_espacial, data = counts,
main = "Survival on the Titanic", shade = TRUE, legend = TRUE)
counts
counts[1]
mosaic(~ local + subnacional + nacional, data = counts,
main = "Survival on the Titanic", shade = TRUE, legend = TRUE)
data.frame(counts)
mosaic(~ Var1 + Var2 + Var3, data = counts,
main = "Survival on the Titanic", shade = TRUE, legend = TRUE)
counts <- data.frame(counts)
mosaic(~ Var1 + Var2 + Var3, data = counts,
main = "Survival on the Titanic", shade = TRUE, legend = TRUE)
mosaic(~ Var2 + Var3, data = counts,
main = "Survival on the Titanic", shade = TRUE, legend = TRUE)
mosaic(~ Var1 + Var3, data = counts,
main = "Survival on the Titanic", shade = TRUE, legend = TRUE)
mosaic(~ Var2 + Var1, data = counts,
main = "Survival on the Titanic", shade = TRUE, legend = TRUE)
mosaic(~ Var2 + Var3, data = counts,
main = "Survival on the Titanic", shade = TRUE, legend = TRUE)
demanda_meses <- pda %>%
mutate(FECHA_LLAMADA = dmy_hms(FECHA_LLAMADA)) %>%
mutate(periodo = month(FECHA_LLAMADA)) %>%
filter(FECHA_LLAMADA >= "2021-01-01" & FECHA_LLAMADA <= "2021-12-31") %>%
group_by(periodo) %>%
summarise(total = sum(llamada))
library(readxl)
library(tsibble)
library(dplyr)
library(ggplot2)
library(feasts)
library(lubridate)
library(readxl)
library(esquisse)
# covertir a objecto tsibble
pda_2021 <- read_excel("datos/llamadas-pda-21-22.xlsx",
sheet = "Llamadas 2021")
pda_2022 <- read_excel("datos/llamadas-pda-21-22.xlsx",
sheet = "Llamadas 2022")
pda <- rbind(pda_2021, pda_2022)
pda$llamada <- 1
demanda_meses <- pda %>%
mutate(FECHA_LLAMADA = dmy_hms(FECHA_LLAMADA)) %>%
mutate(periodo = month(FECHA_LLAMADA)) %>%
filter(FECHA_LLAMADA >= "2021-01-01" & FECHA_LLAMADA <= "2021-12-31") %>%
group_by(periodo) %>%
summarise(total = sum(llamada))
stats_mes <- boxplot(demanda_meses$total)$stats
demanda_meses_clasificada <- demanda_meses %>%
mutate(demanda = ifelse(total <= stats_mes[2,],
'baja',
ifelse(total > stats_mes[2,] &
total <= stats_mes[3,],
'media',
ifelse(total > stats_mes[3,] &
total <= stats_mes[4,],
'alta',
ifelse(total > stats_mes[4,],
'extrema',
'no')))))
demanda_meses <- pda %>%
mutate(FECHA_LLAMADA = dmy_hms(FECHA_LLAMADA)) %>%
mutate(periodo = month(FECHA_LLAMADA)) %>%
filter(FECHA_LLAMADA >= "2021-01-01" & FECHA_LLAMADA <= "2021-12-31") %>%
group_by(periodo) %>%
summarise(total = sum(llamada))
stats_mes <- boxplot(demanda_meses$total)$stats
demanda_meses_clasificada <- demanda_meses %>%
mutate(demanda = ifelse(total <= stats_mes[2,],
'baja',
ifelse(total > stats_mes[2,] &
total <= stats_mes[3,],
'media',
ifelse(total > stats_mes[3,] &
total <= stats_mes[4,],
'alta',
ifelse(total > stats_mes[4,],
'extrema',
'no')))))
demanda_meses_clasificada$periodo <- as.factor(demanda_meses_clasificada$periodo)
## Required Packages
my_packages <- c('ks', 'sf', 'mapview', 'dplyr', 'readr')
not_installed <- my_packages[!(my_packages %in% installed.packages()[ , "Package"])]
if (length(not_installed)) install.packages(not_installed, dependencies = TRUE)
for (q in 1:length(my_packages)) {
library(my_packages[q], character.only = TRUE)
}
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
# Write the deparment name
departament <- 'TOLIMA'
# Write the municipalities names
municipalities <- c('IBAGUÉ', 'CAJAMARCA', 'PIEDRAS', 'ALVARADO')
# Load of the municipalities polygons
municipios <- st_read("mun_13_02_2018/Municipios.shp")
municipios <- st_as_sf(municipios, crs = 4326)
unidad <- municipios[municipios$NOM_DEPART == departament,]
unidad <- unidad[unidad$NOM_MUNICI %in% municipalities,]
unidad <- st_transform(unidad, 4326)
grid <- st_make_grid(unidad, cellsize = 0.01/5)
grid_kde <- do.call(rbind, st_centroid(grid)) %>%
as_tibble()
st_bbox(unidad)
plot(unidad)
delitos <- read_csv("datos/delitos.csv",
locale = locale(decimal_mark = ","))
data=delitos
data %>%
st_as_sf()
data %>%
st_as_sf(coords = c('LONGITUD', 'LATITUD'), crs = 4326)
data %>%
st_as_sf(coords = c('LONGITUD', 'LATITUD'), crs = 4326) %>%
#st_as_sf() %>%
st_join(unidad, join = st_intersects)
data %>%
st_as_sf(coords = c('LONGITUD', 'LATITUD'), crs = 4326) %>%
#st_as_sf() %>%
st_join(unidad, join = st_intersects) %>%
as_tibble() %>%
na.omit()
View(data %>%
st_as_sf(coords = c('LONGITUD', 'LATITUD'), crs = 4326) %>%
#st_as_sf() %>%
st_join(unidad, join = st_intersects) %>%
as_tibble() %>%
na.omit())
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Make object of grouped crime
grouped_crime <- list(homicidio, lesiones, sexual, sexual_nna, extorsion, hurto)
municipalities <- c('IBAGUÉ', 'CAJAMARCA', 'PIEDRAS', 'ALVARADO')
# Import criminal data
data <- read_csv("delitos.csv", locale = locale(decimal_mark = ","))
# Grouped crimes
homicidio <- c("ARTÍCULO 103. HOMICIDIO", "ARTÍCULO 104A. FEMINICIDIO")
lesiones <- c("ARTÍCULO 111. LESIONES PERSONALES", "ARTICULO 120 LESIONES CULPOSAS", "ARTÍCULO 119. LESIONES PERSONALES ( CIRCUNSTANCIAS DE AGRAVACIÓN)",
"ARTÍCULO 113. DEFORMIDAD", "ARTÍCULO 116. PÉRDIDA ANATÓMICA O FUNCIONAL DE UN ÓRGANO O MIEMBRO", "ARTÍCULO 229. VIOLENCIA INTRAFAMILIAR")
sexual <- c("ARTÍCULO 206. ACTO SEXUAL VIOLENTO", "ARTÍCULO 205. ACCESO CARNAL VIOLENTO", "ARTÍCULO 210. ACCESO CARNAL O ACTO SEXUAL ABUSIVO CON INCAPAZ DE RESISTIR",
"ARTÍCULO 210 A. ACOSO SEXUAL", "ARTÍCULO 207. ACCESO CARNAL O ACTO SEXUAL EN PERSONA PUESTA EN INCAPACIDAD DE RESISTIR", "ARTÍCULO 213. INDUCCIÓN A LA PROSTITUCIÓN",
"ARTÍCULO 214. CONSTREÑIMIENTO A LA PROSTITUCIÓN")
sexual_nna <- c("ARTÍCULO 208. ACCESO CARNAL ABUSIVO CON MENOR DE 14 AÑOS", "ARTÍCULO 209. ACTOS SEXUALES CON MENOR DE 14 AÑOS",
"ARTÍCULO 218. PORNOGRAFÍA CON MENORES", "ARTÍCULO 219 A. UTILIZACIÓN O FACILITACIÓN DE MEDIOS DE COMUNICACIÓN PARA OFRECER SERVICIOS SEXUALES DE MENORES",
"ARTÍCULO 217 A. DEMANDA DE EXPLOTACION SEXUAL COMERCIAL DE PERSONA MENOR DE 18 AÑOS DE EDAD", "ARTÍCULO 213 A. PROXENETISMO CON MENOR DE EDAD",
"ARTÍCULO 126. LESIONE CULPOSAS AL FETO", "ARTÍCULO 217. ESTÍMULO A LA PROSTITUCIÓN DE MENORES")
extorsion <- c("ARTÍCULO 244. EXTORSIÓN")
hurto <- c("ARTÍCULO 239. HURTO PERSONAS", "ARTÍCULO 239. HURTO ENTIDADES COMERCIALES", "ARTÍCULO 239. HURTO RESIDENCIAS",
"ARTÍCULO 239. HURTO AUTOMOTORES", "ARTÍCULO 239. HURTO PIRATERÍA TERRESTRE", "ARTÍCULO 239. HURTO ENTIDADES FINANCIERAS",
"ARTÍCULO 243. ABIGEATO")
# Make object of grouped crime
grouped_crime <- list(homicidio, lesiones, sexual, sexual_nna, extorsion, hurto)
length(grouped_crime)
